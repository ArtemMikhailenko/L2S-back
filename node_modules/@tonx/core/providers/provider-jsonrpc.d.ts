import { AbstractProvider } from "./abstract-provider";
import type { RunAction } from "./abstract-provider";
import HttpFetchClient from "~core/utils/http-fetch-client";
import { Network } from "~core/types/network";
export type JsonRpcApiProviderOptions = {
    network: Network;
    baseURL?: string;
    httpFetchClient?: HttpFetchClient;
};
export declare class JsonRpcProvider extends AbstractProvider {
    #private;
    constructor();
    init(options: JsonRpcApiProviderOptions): void;
    _send(payload: any): Promise<any>;
    send(method: string, params: Array<any> | Record<string, any>): Promise<any>;
    getRpcRequest(action: RunAction): null | {
        method: string;
        params: Array<any> | Record<string, any>;
    };
    _perform(action: RunAction): Promise<any>;
}
