import { JsonRpcProvider } from "./provider-jsonrpc";
import { GetTransactionsParams, GetJettonBurnsParams, GetJettonMastersParams, GetJettonTransfersParams, GetJettonWalletsParams, GetMessagesParams, GetNftCollectionsParams, GetNftItemsParams, GetNftTransfersParams, EstimateFeeParams, GetBlockHeaderParams, GetBlockTransactionsParams, RunGetMethodParams, RunGetMethodV3Params, RunGetMethodResponse, GetTgBTCBalanceParams, GetTgBTCHoldersParams, GetTgBTCBurnsParams, GetTgBTCWalletAddressByOwnerParams, RadixConversionParams, BinaryConversionParams, GetTgBTCTransferPayload, GetTgBTCBalanceResponse, GetTgBTCBurnsResponse, GetTgBTCConfigResponse, GetTgBTCHoldersResponse, GetTgBTCMasterAddressResponse, GetTgBTCTransferResponse, GetTgBTCTransfersParams, GetTgBTCTransfersResponse, GetTgBTCWalletAddressByOwnerResponse, TgBTCMetaDataResponse } from '~core/types/types';
import { TONXJsonRpcProviderOptions, TONXRunAction } from "~core/types/action-types";
export declare class TONXJsonRpcProvider extends JsonRpcProvider {
    private apiKey;
    private network;
    private httpClientOptions?;
    constructor(options: TONXJsonRpcProviderOptions);
    private initDefaultEndpoint;
    private performWithLabsEndpoint;
    getRpcRequest(action: TONXRunAction): null | {
        method: string;
        params: Record<string, any>;
    };
    getAccountBalance(address: string): Promise<any>;
    getTransactions(params?: GetTransactionsParams): Promise<any>;
    getJettonBurns(params?: GetJettonBurnsParams): Promise<any>;
    getJettonMasters(params?: GetJettonMastersParams): Promise<any>;
    getJettonTransfers(params?: GetJettonTransfersParams): Promise<any>;
    getJettonWallets(params?: GetJettonWalletsParams): Promise<any>;
    getMessages(params?: GetMessagesParams): Promise<any>;
    getNftCollections(params?: GetNftCollectionsParams): Promise<any>;
    getNftItems(params?: GetNftItemsParams): Promise<any>;
    getNftTransfers(params?: GetNftTransfersParams): Promise<any>;
    estimateFee(params?: EstimateFeeParams): Promise<any>;
    getAddressInformation(address: string): Promise<any>;
    getAddressState(address: string): Promise<any>;
    getBlockHeader(params: GetBlockHeaderParams): Promise<any>;
    getBlockTransactions(params: GetBlockTransactionsParams): Promise<any>;
    getConsensusBlock(): Promise<any>;
    getExtendedAddressInformation(address: string): Promise<any>;
    getMasterchainBlockSignatures(seqno: number): Promise<any>;
    getTokenData(address: string): Promise<any>;
    runGetMethod(params: RunGetMethodParams | RunGetMethodV3Params): Promise<RunGetMethodResponse>;
    sendMessage(boc: string): Promise<any>;
    getBocStatus(boc: string): Promise<any>;
    verifyBoc(boc: string): Promise<any>;
    radixConversion(params: RadixConversionParams): Promise<any>;
    binaryConversion(params: BinaryConversionParams): Promise<any>;
    detectAddress(address: string): Promise<any>;
    getMasterchainInfo(): Promise<any>;
    getTgBTCConfig(): Promise<GetTgBTCConfigResponse>;
    getTgBTCBalance(params: GetTgBTCBalanceParams): Promise<GetTgBTCBalanceResponse>;
    getTgBTCMasterAddress(): Promise<GetTgBTCMasterAddressResponse>;
    getTgBTCHolders(params?: GetTgBTCHoldersParams): Promise<GetTgBTCHoldersResponse>;
    getTgBTCBurns(params: GetTgBTCBurnsParams): Promise<GetTgBTCBurnsResponse>;
    getTgBTCWalletAddressByOwner(params: GetTgBTCWalletAddressByOwnerParams): Promise<GetTgBTCWalletAddressByOwnerResponse>;
    getTgBTCTransferPayload(params: GetTgBTCTransferPayload): Promise<GetTgBTCTransferResponse>;
    getTgBTCMetaData(): Promise<TgBTCMetaDataResponse>;
    getTgBTCTransfers(params: GetTgBTCTransfersParams): Promise<GetTgBTCTransfersResponse[]>;
}
